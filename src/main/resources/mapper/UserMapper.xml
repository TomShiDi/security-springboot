<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tomshidi.security.springboot.repository.UserMapper">

    <!--开启本mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象

        flushInterval:刷新间隔时间，单位为毫秒，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。

        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象

        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存
    -->
    <cache eviction="LRU" size="1024" readOnly="false"/>

    <resultMap id="baseResultMap" type="com.tomshidi.security.springboot.entity.UserEntity">
        <id column="id" property="id" javaType="String" jdbcType="VARCHAR"/>
        <result column="username" property="username" javaType="String" jdbcType="VARCHAR"/>
        <result column="password" property="password" javaType="String" jdbcType="VARCHAR"/>
        <result column="fullname" property="fullname" javaType="String" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="getUserByUsername" resultMap="baseResultMap" >
        select id,username,password,fullname,mobile from t_user
            where username = #{username}
    </select>

    <select id="getUserPermissionByUserId" resultType="com.tomshidi.security.springboot.entity.PermissionEntity">
        SELECT t_permission.id,t_permission.`code`,t_permission.description,t_permission.url
        from t_user INNER JOIN t_user_role ON t_user.id = t_user_role.user_id
                    INNER JOIN t_role_permission ON t_role_permission.role_id = t_user_role.role_id
                    INNER JOIN t_permission ON t_permission.id = t_role_permission.permission_id
        where t_user.id = #{user_id}
    </select>
</mapper>